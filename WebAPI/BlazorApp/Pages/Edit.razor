@page "/edit/{id:int}"
@using BlazorApp.Models
@using BlazorApp.Services
@inject ICustomerService service;
@inject NavigationManager NavigationManager;

<h3>Edit</h3>

@if (customerCreate == null)
{
    <div>Loading</div>
}
else
{
    <EditForm Model="@customerCreate" OnValidSubmit="@SubmitEdit">
    <DataAnnotationsValidator />
    @*<ValidationSummary />*@
  <div class="form-group">
    <label for="Id">Id</label>
    <input class="form-control" value="@customerCreate.Id" readonly/>
  </div>

  <div class="form-group">
    <label for="AttributeMaster">Attribute Master</label>
    <InputText class="form-control" @bind-Value="customerCreate.AttributeMaster"></InputText>
    <ValidationMessage For="()=>customerCreate.AttributeMaster"></ValidationMessage>
  </div>

  <div class="form-group">
    <label for="AttributeValuesCode">Attribute Values Code</label>
    <InputText class="form-control" @bind-Value="customerCreate.AttributeValuesCode"></InputText>
    <ValidationMessage For="()=>customerCreate.AttributeValuesCode"></ValidationMessage>
  </div>

  <div class="form-group">
    <label for="Description">Description</label>
    <InputText class="form-control" @bind-Value="customerCreate.Description"></InputText>
    <ValidationMessage For="()=>customerCreate.Description"></ValidationMessage>
  </div>

  <div class="form-group">
    <label for="ShortName">ShortName</label>
    <InputText class="form-control" @bind-Value="customerCreate.ShortName"></InputText>
    <ValidationMessage For="()=>customerCreate.ShortName"></ValidationMessage>
  </div>

  <div class="form-group">
    <label for="Parent">Parent</label>
    <InputText class="form-control" @bind-Value="customerCreate.Parent"></InputText>
    <ValidationMessage For="()=>customerCreate.Parent"></ValidationMessage>
  </div>

  <div class="form-group">
    <label for="EffectiveDate">EffectiveDate</label>
    <InputDate class="form-control" @bind-Value="customerCreate.EffectiveDate"></InputDate>
    <ValidationMessage For="()=>customerCreate.EffectiveDate"></ValidationMessage>
  </div>

  <div class="form-group">
    <label for="ValidUntil">ValidUntil</label>
    <InputDate TValue="DateTime?" class="form-control" @bind-Value="customerCreate.ValidUntil"></InputDate>
    <ValidationMessage For="()=>customerCreate.ValidUntil"></ValidationMessage>
  </div>
  <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>
}

@code {
    [Parameter]
    public int id { get; set; }

    private CustomerAttributeModel customerCreate;

    protected override async Task OnInitializedAsync()
    {
        var cust = await service.GetOne(id);
        customerCreate = new CustomerAttributeModel();
        customerCreate.Id = cust.Id;
        customerCreate.AttributeMaster = cust.AttributeMaster;
        customerCreate.AttributeValuesCode = cust.AttributeValuesCode;
        customerCreate.Description = cust.Description;
        customerCreate.ShortName = cust.ShortName;
        customerCreate.Parent = cust.Parent;
        customerCreate.EffectiveDate = cust.EffectiveDate;
        customerCreate.ValidUntil = cust.ValidUntil;

    }

    private async Task SubmitEdit(EditContext context)
    {
        var result = await service.Edit(customerCreate);
        if (result)
        {
            NavigationManager.NavigateTo("/customerAttribute");
        }
    }
}
